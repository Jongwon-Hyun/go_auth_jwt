// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	users "authentication/users/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryIF is an autogenerated mock type for the UserRepositoryIF type
type UserRepositoryIF struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: id
func (_m *UserRepositoryIF) FindByID(id int) (*users.User, error) {
	ret := _m.Called(id)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(int) *users.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *UserRepositoryIF) FindByUserID(userID string) (*users.User, error) {
	ret := _m.Called(userID)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(string) *users.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepositoryIF) Save(user *users.User) *users.User {
	ret := _m.Called(user)

	var r0 *users.User
	if rf, ok := ret.Get(0).(func(*users.User) *users.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	return r0
}
